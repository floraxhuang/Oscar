# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

### Install Packages
"""

import sys
!{sys.executable} -m pip install dfply

"""### Import Library"""

import pandas as pd
import numpy as np
import time
from dfply import *
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn

from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import scale
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score

"""### Import Award Data"""

!git clone https://github.com/floraxhuang/Oscar.git

# %cd Oscar
awards = pd.read_csv('award_tag.csv')

#preprocessing
awards = awards[["Rater","Film","Year","Genres","Win"]]
awards[["Genres"]] = awards[["Genres"]].fillna("Other")
awards["Year"] = awards["Year"].astype('category')

awards.head()

"""### Import Oscar Data"""

oscars = pd.read_csv("oscar_test_tag.csv")

#preprocessing
oscars = oscars[["Rater","Film","Year","Genres","Win"]]
oscars[["Genres"]] = oscars[["Genres"]].fillna("Other")
oscars["Year"] = oscars["Year"].astype('category')

oscars.tail()

"""### KNN

#### Sub Functions
"""

#subset data
def subsetdata(data, subset_quantile):
    filter_standard = data.groupby(["Film"]).size().reset_index(name='counts').counts.quantile(subset_quantile)
    subset_data = data.groupby("Film").filter(lambda x: len(x) >= filter_standard).reset_index(drop=True)
    
    return filter_standard, subset_data

#One hot encoding
def OneHotEncoding(train,test):
    encoder = OneHotEncoder(handle_unknown='ignore').fit(train)
    train = encoder.transform(train)
    test = encoder.transform(test)
    return encoder,train, test

"""### Training"""

def knn(data, oscar, subset_quantile):
  #Initialize output
  n_iteration = 1 
  result_dict = []
  oscar_pred = pd.DataFrame()
  os_acc = 0
  yr_name = ["_5","_10","_15"]
  
  for quantile in subset_quantile:
    print("---Running iteration " + str(n_iteration) + " ---")
    #subset original data
    filter_standard, subset_data = subsetdata(data, quantile)
    
    n_raters = subset_data.Rater.unique().shape[0]
    n_movies = round(subset_data.Film.unique().shape[0]/data.Film.unique().shape[0],2)
    n_size = subset_data.shape[0]*subset_data.shape[1]
    
    #split test and train data
    xtrain, xtest, ytrain, ytest = train_test_split(subset_data.loc[:, subset_data.columns != "Win"],subset_data.loc[:, "Win"], test_size=0.2, random_state=42)
    
    #encode data
    encoder, xtrain_enc, xtest_enc = OneHotEncoding(xtrain, xtest)
    
    #Dense
    start = time.time()
    neigh = KNeighborsClassifier(n_neighbors=3)
    neigh.fit(xtrain_enc, ytrain)
    predictions = neigh.predict(xtest_enc)
    
    #Evaluation metrics
    model_acc = f1_score(ytest, predictions, average='weighted')
    
    #Predicting the recent 15 years of Oscar
    unique_years = list(np.unique(oscar.Year))
    oscar_years = [unique_years[-5:], unique_years[-10:], unique_years]
    oscar_accuracy = []
    for n in range(len(oscar_years)):
      subset_yr = oscar_years[n]
      oscar_subset = oscar >> mask(X.Year.isin(subset_yr))
      oscar_x = oscar_subset.loc[:, oscar_subset.columns != "Win"]
      oscar_y = oscar_subset.loc[:, "Win"]
      oscar_train = encoder.transform(oscar_x)
    
      oscar_predictions = neigh.predict(oscar_train)
      oscar_acc = f1_score(oscar_y, oscar_predictions, average="weighted")
      oscar_accuracy.append(oscar_acc)
      
      if oscar_acc > os_acc:
        os_acc=oscar_acc
        oscar_pred = oscar_subset.copy()
        oscar_pred["Predictions"] = oscar_predictions
      
    spent_time = time.time() - start
    
    res = [n_movies, spent_time, model_acc]
    res.extend(oscar_accuracy)
    result_dict.append(res)
    n_iteration += 1
  
  results = pd.DataFrame(result_dict)
  results.columns = ["N_Movies","Time","Model_Accuracy","Oscar_Rec5","Oscar_Rec10","Oscar_Rec15"]
        
  return results, oscar_pred

"""### Test"""

quantile_list = [0.1,0.5,0.7,0.9]

result, oscar_pred = knn(awards,oscars,quantile_list)

result

oscar_pred >> mask(X.Win==1)

oscar_pred >> mask(X.Predictions==1)

