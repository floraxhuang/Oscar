# -*- coding: utf-8 -*-
"""Oscar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bO_R4bPij7pIFHraq0VoEm1-oj2JUpjn
"""

import sys
!{sys.executable} -m pip install dfply

import pandas as pd
from dfply import *
from scipy.spatial import distance
from sklearn.metrics import jaccard_similarity_score
from wikipedia import *
import re

!git clone https://github.com/floraxhuang/Oscar.git

# %cd Oscar

oscar = pd.read_csv('data_csv.csv')

oscar.head()

np.unique(oscar.category)

"""### Best Picture"""

best_picture = oscar >> mask(X.category=="BEST PICTURE")

best_picture.head()

"""### Won writing"""

writing_winner = oscar[oscar['category'].str.contains("WRITING")]

writing_winner = (best_picture >> right_join(writing_winner, by=("year","entity")) 
                  >> drop(1, ["category_x", "category_y"]) 
                  >> rename(won_BP=X.winner_x, won_writing=X.winner_y))
writing_winner = writing_winner.dropna(how='any')
writing_winner[["won_BP", "won_writing"]] = (writing_winner[["won_BP", "won_writing"]] == True).astype(int)

writing_winner.head()

jaccard_similarity_score(writing_winner["won_writing"], writing_winner["won_BP"])

"""### Won Director"""

director_winner = oscar[oscar['category'].str.contains("DIRECTING")]

director_winner = (best_picture >> right_join(director_winner, by=("year","entity")) 
                  >> drop(1, ["category_x", "category_y"]) 
                  >> rename(won_BP=X.winner_x, won_director=X.winner_y))
director_winner = director_winner.dropna(how='any')
director_winner[["won_BP", "won_director"]] = (director_winner[["won_BP", "won_director"]] == True).astype(int)

director_winner.head()

jaccard_similarity_score(director_winner["won_director"], director_winner["won_BP"])

"""### Directors Guild of America Award"""

DGA_page = WikipediaPage("Directors Guild of America Award")
DGA_content = DGA_page.content

DGA_content_filter = DGA_content.split("Outstanding Achievement in Feature Film",1)[1].split("West Side Story",1)[1].split("2018",1)[0].split("\n")

DGA_win = [re.sub('[†*‡§¿]', '', x.split("–")[1]).strip(' \t\n\r') for x in DGA_content_filter if (x.startswith('1')|x.startswith('2'))]

DGA_director = pd.DataFrame(DGA_win, columns=["entity"]).assign(win_DGA=1)

DGA_BP = DGA_director >> right_join(best_picture, by=("entity")) >> drop(["year","category"]) >> rename(win_BP=X.winner) 
DGA_BP["win_DGA"] = DGA_BP["win_DGA"].fillna(0)
DGA_BP[["win_BP"]] = (DGA_BP[["win_BP"]] == True).astype(float)

DGA_BP.head()

jaccard_similarity_score(DGA_BP["win_DGA"], DGA_BP["win_BP"])

"""### Critics' Choice Movie Award for Best Director"""

critic_page = WikipediaPage("Critics' Choice Movie Award for Best Director")
critic_content = critic_page.content

critic_content_filter = critic_content.split("Gangs of New York",1)[1].split("2018",1)[0].split("\n")

critic_win = [x.split("–")[1].strip(' \t\n\r') for x in critic_content_filter if x.startswith('20')]

critic_director = pd.DataFrame(critic_win, columns=["entity"]).assign(win_critic=1)

critic_lose = list(filter(None,[x for x in critic_content_filter if not(x.startswith('20')|x.startswith('='))]))

critic_lose = [x.split("–")[1].strip(' \t\n\r') for x in critic_lose]

critic_nominee = pd.DataFrame(critic_lose, columns=["entity"]).assign(win_critic=0)

frames = [critic_director, critic_nominee]
critic_choice = pd.concat(frames).reset_index(drop=True)

critic_choice.head()

critic_BP = critic_choice >> right_join(best_picture, by=("entity")) >> drop(["year","category"]) >> rename(win_BP=X.winner) 
critic_BP["win_critic"] = critic_BP["win_critic"].fillna(0)
critic_BP[["win_BP"]] = (critic_BP[["win_BP"]] == True).astype(float)

critic_BP.head()

jaccard_similarity_score(critic_BP["win_critic"], critic_BP["win_BP"])

